name: Docker Image
on:
  workflow_call:
    inputs:
      image:
        description: Override docker image name, by default set to <org_name>/<repo_name>
        required: false
        type: string
      version-regex:
        description: Regex to filter out release tags
        required: false
        type: string
        default: ^(refs\/tags\/)?v([0-9]+.[0-9]+.[0-9]+(-r[0-9]+)?)$
      version:
        description: 'Version string, ex: v1.20.9 or refs/tags/<tag_name> is also allowed'
        required: true
        type: string
      push:
        description: Push docker image
        required: false
        type: boolean
        default: false

defaults:
  run:
    shell: bash -leo pipefail {0}

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set.outputs.image }}
      kubeversion: ${{ steps.versions.outputs.kubeversion }}
      cache-id: ${{ steps.versions.outputs.cache-id }}
      minor-regex: ${{ steps.versions.outputs.minor-regex }}
      rid: ${{ steps.kubever.outputs.prerelease }} # releases id (-r123)
      push: ${{ inputs.push && inputs.version != '' }}

    steps:
      -
        uses: actions/github-script@v4
        id: set
        with:
          script: |
            const image = '${{ github.event.repository.full_name }}'.toLowerCase().replace(/\/docker-/, '/')
            core.setOutput('image', '${{ inputs.image }}' ? '${{ inputs.image }}' : image)
      -
        name: kubectl version
        id: kubever
        if: inputs.version != ''
        uses: dysnix/ws-action-parse-semver@upgrade
        with:
          string: '${{ inputs.version }}'
          extractor_regex: '${{ inputs.version-regex }}'
          extractor_group: 2
      -
        uses: actions/github-script@v6
        id: versions
        if: inputs.version != ''
        with:
          script: |
            let minorver='v${{ steps.kubever.outputs.version }}'.split('.', 2).join('.')
            // note that failed can be ''
            if ('${{ steps.kubever.outputs.failed }}' != 'true') {
              core.setOutput('kubeversion', 'v${{ steps.kubever.outputs.version }}')
            }
            core.setOutput('minor-regex', '^' + minorver.replace(/\./g, '\\.') + '\\.[0-9]+')
            core.setOutput('cache-id', '${{ matrix.flavor }}-' + minorver)
      -
        name: version failure
        if: inputs.version != '' && steps.kubever.outputs.failed == 'true'
        run: |
          echo "Version couldn't be extracted from: ${{ inputs.version }}"
          exit 1

  build:
    name: Docker Image
    runs-on: ubuntu-latest
    needs: setup

    strategy:
      matrix:
        flavor: [default, gcloud]
        include:
          - flavor: default
            image: alpine
          - flavor: gcloud
            image: google/cloud-sdk:alpine
            suffix: -gcloud

    steps:
      -
        uses: dysnix/find-latest-tag@v2
        id: newest-v
        with:
          compare-to: ${{ inputs.version }}
          repository: ${{ github.repository }}
      -
        uses: dysnix/find-latest-tag@v2
        id: newest-mv
        with:
          compare-to: ${{ inputs.version }}
          regex: ${{ needs.setup.outputs.minor-regex }}
          repository: ${{ github.repository }}
      -
        id: latest-tag
        if: steps.newest-v.outputs.equal == 'true' || steps.newest-v.outputs.tag == ''
        run: |
          latest="${{ matrix.flavor }}"; latest="${latest#default}"
          echo "latest tag: ${latest:-latest}"
          echo "::set-output name=value::${latest:-latest}"
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ needs.setup.outputs.image }}
          flavor: |
            latest=false
            suffix=${{ matrix.suffix }}
          tags: |
            type=semver,pattern=v{{version}},value=${{ needs.setup.outputs.kubeversion }}
            type=semver,pattern=v{{version}},value=${{ needs.setup.outputs.kubeversion }},suffix=${{ matrix.suffix }}-${{ needs.setup.outputs.rid }},enable=${{ needs.setup.outputs.rid != '' }}
            type=semver,pattern=v{{major}}.{{minor}},value=${{ needs.setup.outputs.kubeversion }},enable=${{ steps.newest-mv.outputs.equal == 'true' || steps.newest-mv.outputs.tag == '' }}
            type=raw,value=${{ steps.latest-tag.outputs.value }},suffix=
            type=raw,value=stub-build,enable=${{ needs.setup.outputs.kubeversion == '' }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ needs.setup.outputs.cache-id }}-${{ github.sha }}
          restore-keys: |-
            ${{ runner.os }}-buildx-${{ needs.setup.outputs.cache-id }}-${{ github.event.before }}
      -
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        uses: actions/checkout@v3
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ needs.setup.outputs.push == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            KUBECTL_VERSION=${{ needs.setup.outputs.kubeversion }}
            FLAVOR_IMAGE=${{ matrix.image }}
      -
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      -
        id: details
        if: always()
        name: Build details
        uses: actions/github-script@v5
        with:
          script: |
            let published = "${{ steps.build.outcome == 'success' && needs.setup.outputs.push == 'true' }}"
            core.setOutput('published', published)
            core.info(`üèÅ published == ${published}`)
            core.info(`üèÅ latest tag: ${{ steps.latest-tag.outputs.value }}`)
